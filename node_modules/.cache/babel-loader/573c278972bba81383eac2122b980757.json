{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAgendaView = void 0;\n\nconst LuxonHelper_1 = require(\"../utils/LuxonHelper\");\n\nconst Helper_1 = require(\"../utils/Helper\");\n\nconst KalendHelper_1 = require(\"../utils/KalendHelper\");\n\nconst prepareMultiDayEvents = (events, config) => {\n  const preparedEvents = {};\n  events.forEach(event => {\n    const {\n      dateTimeStart,\n      dateTimeEnd\n    } = KalendHelper_1.getEventDateTime(event, config); // check if is multi-day\n\n    const isSameDay = LuxonHelper_1.LuxonHelper.isSameDay(dateTimeStart, dateTimeEnd); // origin date to determine when event starts in each row\n\n    let originDate = Helper_1.formatToDateKey(dateTimeStart); // handle multi-day\n\n    if (!isSameDay) {\n      const diffInDays = LuxonHelper_1.LuxonHelper.differenceInDays(dateTimeStart, dateTimeEnd); // need to store each occurrence\n\n      let daySpawns = []; // flag if events continue in next row\n      // split daySpawns and adjust originDate\n\n      for (let i = 0; i <= diffInDays; i++) {\n        const refDate = dateTimeStart.plus({\n          days: i\n        });\n        const dateKey = Helper_1.formatToDateKey(refDate, config.timezone); // store each day in multi-day event range\n\n        daySpawns.push(dateKey);\n        const eventClone = Object.assign(Object.assign({}, event), {\n          startAt: refDate.toString(),\n          summary: `${event.summary} ${i + 1}/${diffInDays + 1}`,\n          originDate,\n          daysAfter: diffInDays - i\n        });\n        eventClone.daySpawns = daySpawns;\n\n        if (!preparedEvents[originDate]) {\n          preparedEvents[originDate] = [eventClone];\n        } else {\n          preparedEvents[originDate] = [...preparedEvents[originDate], ...[eventClone]];\n        }\n\n        daySpawns = [];\n        originDate = Helper_1.formatToDateKey(refDate.plus({\n          days: 1\n        }));\n      }\n    } else {\n      // single day event\n      const dateKey = Helper_1.formatToDateKey(LuxonHelper_1.parseToDateTime(event.startAt, event.timezoneStartAt || config.timezone));\n      event.originDate = originDate;\n\n      if (!preparedEvents[dateKey]) {\n        preparedEvents[dateKey] = [event];\n      } else {\n        preparedEvents[dateKey] = [...preparedEvents[dateKey], ...[event]];\n      }\n    }\n  });\n  return preparedEvents;\n};\n\nconst getAgendaView = (events, config) => {\n  const preparedEvents = prepareMultiDayEvents(events, config);\n  return preparedEvents;\n};\n\nexports.getAgendaView = getAgendaView;","map":{"version":3,"sources":["C:/Users/deval/Desktop/JSX/calendar2.0/node_modules/kalend-layout/views/agendaView.js"],"names":["Object","defineProperty","exports","value","getAgendaView","LuxonHelper_1","require","Helper_1","KalendHelper_1","prepareMultiDayEvents","events","config","preparedEvents","forEach","event","dateTimeStart","dateTimeEnd","getEventDateTime","isSameDay","LuxonHelper","originDate","formatToDateKey","diffInDays","differenceInDays","daySpawns","i","refDate","plus","days","dateKey","timezone","push","eventClone","assign","startAt","toString","summary","daysAfter","parseToDateTime","timezoneStartAt"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAgendaView = void 0;\nconst LuxonHelper_1 = require(\"../utils/LuxonHelper\");\nconst Helper_1 = require(\"../utils/Helper\");\nconst KalendHelper_1 = require(\"../utils/KalendHelper\");\nconst prepareMultiDayEvents = (events, config) => {\n    const preparedEvents = {};\n    events.forEach((event) => {\n        const { dateTimeStart, dateTimeEnd } = KalendHelper_1.getEventDateTime(event, config);\n        // check if is multi-day\n        const isSameDay = LuxonHelper_1.LuxonHelper.isSameDay(dateTimeStart, dateTimeEnd);\n        // origin date to determine when event starts in each row\n        let originDate = Helper_1.formatToDateKey(dateTimeStart);\n        // handle multi-day\n        if (!isSameDay) {\n            const diffInDays = LuxonHelper_1.LuxonHelper.differenceInDays(dateTimeStart, dateTimeEnd);\n            // need to store each occurrence\n            let daySpawns = [];\n            // flag if events continue in next row\n            // split daySpawns and adjust originDate\n            for (let i = 0; i <= diffInDays; i++) {\n                const refDate = dateTimeStart.plus({ days: i });\n                const dateKey = Helper_1.formatToDateKey(refDate, config.timezone);\n                // store each day in multi-day event range\n                daySpawns.push(dateKey);\n                const eventClone = Object.assign(Object.assign({}, event), { startAt: refDate.toString(), summary: `${event.summary} ${i + 1}/${diffInDays + 1}`, originDate, daysAfter: diffInDays - i });\n                eventClone.daySpawns = daySpawns;\n                if (!preparedEvents[originDate]) {\n                    preparedEvents[originDate] = [eventClone];\n                }\n                else {\n                    preparedEvents[originDate] = [\n                        ...preparedEvents[originDate],\n                        ...[eventClone],\n                    ];\n                }\n                daySpawns = [];\n                originDate = Helper_1.formatToDateKey(refDate.plus({ days: 1 }));\n            }\n        }\n        else {\n            // single day event\n            const dateKey = Helper_1.formatToDateKey(LuxonHelper_1.parseToDateTime(event.startAt, event.timezoneStartAt || config.timezone));\n            event.originDate = originDate;\n            if (!preparedEvents[dateKey]) {\n                preparedEvents[dateKey] = [event];\n            }\n            else {\n                preparedEvents[dateKey] = [...preparedEvents[dateKey], ...[event]];\n            }\n        }\n    });\n    return preparedEvents;\n};\nconst getAgendaView = (events, config) => {\n    const preparedEvents = prepareMultiDayEvents(events, config);\n    return preparedEvents;\n};\nexports.getAgendaView = getAgendaView;\n"]},"metadata":{},"sourceType":"script"}