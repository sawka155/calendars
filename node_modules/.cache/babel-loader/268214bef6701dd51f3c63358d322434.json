{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseToCalendarDays = exports.mapEventsToDate = exports.formatToDateKey = void 0;\n\nconst luxon_1 = require(\"luxon\");\n\nconst LuxonHelper_1 = require(\"./LuxonHelper\"); // TODO should add timezone?\n\n\nconst formatToDateKey = (date, timezone) => date.setZone(timezone || 'Europe/Berlin').toFormat('dd-MM-yyyy');\n\nexports.formatToDateKey = formatToDateKey;\n\nconst mapEventsToDate = (events, timezone) => {\n  const result = {};\n\n  if (!events || events.length === 0) {\n    return result;\n  }\n\n  events === null || events === void 0 ? void 0 : events.forEach(event => {\n    const startDate = LuxonHelper_1.parseToDateTime(event.startAt, event.timezoneStartAt || timezone);\n    const key = exports.formatToDateKey(startDate);\n\n    if (result[key]) {\n      result[key] = [...result[key], ...[event]];\n    } else {\n      result[key] = [event];\n    }\n  });\n  return result;\n};\n\nexports.mapEventsToDate = mapEventsToDate;\n\nconst parseToCalendarDays = calendarDays => {\n  if (typeof calendarDays[0] === 'string') {\n    return calendarDays.map(item => luxon_1.DateTime.fromISO(item));\n  }\n\n  return calendarDays;\n};\n\nexports.parseToCalendarDays = parseToCalendarDays;","map":{"version":3,"sources":["C:/Users/deval/Desktop/JSX/calendar2.0/node_modules/kalend-layout/utils/Helper.js"],"names":["Object","defineProperty","exports","value","parseToCalendarDays","mapEventsToDate","formatToDateKey","luxon_1","require","LuxonHelper_1","date","timezone","setZone","toFormat","events","result","length","forEach","event","startDate","parseToDateTime","startAt","timezoneStartAt","key","calendarDays","map","item","DateTime","fromISO"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8BF,OAAO,CAACG,eAAR,GAA0BH,OAAO,CAACI,eAAR,GAA0B,KAAK,CAAvF;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,eAAD,CAA7B,C,CACA;;;AACA,MAAMF,eAAe,GAAG,CAACI,IAAD,EAAOC,QAAP,KAAoBD,IAAI,CAACE,OAAL,CAAaD,QAAQ,IAAI,eAAzB,EAA0CE,QAA1C,CAAmD,YAAnD,CAA5C;;AACAX,OAAO,CAACI,eAAR,GAA0BA,eAA1B;;AACA,MAAMD,eAAe,GAAG,CAACS,MAAD,EAASH,QAAT,KAAsB;AAC1C,QAAMI,MAAM,GAAG,EAAf;;AACA,MAAI,CAACD,MAAD,IAAWA,MAAM,CAACE,MAAP,KAAkB,CAAjC,EAAoC;AAChC,WAAOD,MAAP;AACH;;AACDD,EAAAA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACG,OAAP,CAAgBC,KAAD,IAAW;AACtE,UAAMC,SAAS,GAAGV,aAAa,CAACW,eAAd,CAA8BF,KAAK,CAACG,OAApC,EAA6CH,KAAK,CAACI,eAAN,IAAyBX,QAAtE,CAAlB;AACA,UAAMY,GAAG,GAAGrB,OAAO,CAACI,eAAR,CAAwBa,SAAxB,CAAZ;;AACA,QAAIJ,MAAM,CAACQ,GAAD,CAAV,EAAiB;AACbR,MAAAA,MAAM,CAACQ,GAAD,CAAN,GAAc,CAAC,GAAGR,MAAM,CAACQ,GAAD,CAAV,EAAiB,GAAG,CAACL,KAAD,CAApB,CAAd;AACH,KAFD,MAGK;AACDH,MAAAA,MAAM,CAACQ,GAAD,CAAN,GAAc,CAACL,KAAD,CAAd;AACH;AACJ,GAT+C,CAAhD;AAUA,SAAOH,MAAP;AACH,CAhBD;;AAiBAb,OAAO,CAACG,eAAR,GAA0BA,eAA1B;;AACA,MAAMD,mBAAmB,GAAIoB,YAAD,IAAkB;AAC1C,MAAI,OAAOA,YAAY,CAAC,CAAD,CAAnB,KAA2B,QAA/B,EAAyC;AACrC,WAAOA,YAAY,CAACC,GAAb,CAAkBC,IAAD,IAAUnB,OAAO,CAACoB,QAAR,CAAiBC,OAAjB,CAAyBF,IAAzB,CAA3B,CAAP;AACH;;AACD,SAAOF,YAAP;AACH,CALD;;AAMAtB,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseToCalendarDays = exports.mapEventsToDate = exports.formatToDateKey = void 0;\nconst luxon_1 = require(\"luxon\");\nconst LuxonHelper_1 = require(\"./LuxonHelper\");\n// TODO should add timezone?\nconst formatToDateKey = (date, timezone) => date.setZone(timezone || 'Europe/Berlin').toFormat('dd-MM-yyyy');\nexports.formatToDateKey = formatToDateKey;\nconst mapEventsToDate = (events, timezone) => {\n    const result = {};\n    if (!events || events.length === 0) {\n        return result;\n    }\n    events === null || events === void 0 ? void 0 : events.forEach((event) => {\n        const startDate = LuxonHelper_1.parseToDateTime(event.startAt, event.timezoneStartAt || timezone);\n        const key = exports.formatToDateKey(startDate);\n        if (result[key]) {\n            result[key] = [...result[key], ...[event]];\n        }\n        else {\n            result[key] = [event];\n        }\n    });\n    return result;\n};\nexports.mapEventsToDate = mapEventsToDate;\nconst parseToCalendarDays = (calendarDays) => {\n    if (typeof calendarDays[0] === 'string') {\n        return calendarDays.map((item) => luxon_1.DateTime.fromISO(item));\n    }\n    return calendarDays;\n};\nexports.parseToCalendarDays = parseToCalendarDays;\n"]},"metadata":{},"sourceType":"script"}