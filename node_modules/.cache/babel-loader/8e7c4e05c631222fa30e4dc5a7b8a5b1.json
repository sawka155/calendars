{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst index_1 = require(\"../index\");\n\nconst commonHelper_1 = require(\"../utils/commonHelper\");\n\nconst agendaView_1 = require(\"./agendaView\");\n\nconst daysView_1 = require(\"./daysView\");\n\nconst monthViewHelper_1 = require(\"../utils/monthViewHelper\");\n\nconst monthView_1 = require(\"./monthView\");\n\nconst Helper_1 = require(\"../utils/Helper\");\n\nconst validator_1 = require(\"../utils/validator\");\n\nexports.default = data => {\n  return new Promise(resolve => {\n    if (data) {\n      validator_1.validateInput(data);\n      const {\n        events,\n        width,\n        config,\n        height,\n        isMobile,\n        selectedView\n      } = data; // parse to calendar days if dates are ISO string\n\n      const calendarDays = Helper_1.parseToCalendarDays(data.calendarDays); // calculate layout for different views\n\n      if (selectedView === index_1.CALENDAR_VIEW.MONTH) {\n        const monthPositions = monthView_1.getMonthViewLayout(events, width, calendarDays, config, monthViewHelper_1.getMaxEventsVisible(height));\n        resolve(Object.assign(Object.assign({\n          selectedView: index_1.CALENDAR_VIEW.MONTH\n        }, monthPositions), {\n          calendarDays,\n          overflowingEvents: monthPositions.overflowingEvents\n        }));\n      } else if (commonHelper_1.checkIfIsDaysView(selectedView)) {\n        const result = daysView_1.getDaysViewLayout(events, calendarDays, config, width, selectedView, isMobile);\n        resolve({\n          selectedView,\n          headerPositions: result.headerPositions.positions,\n          headerOffsetTop: result.headerPositions.headerOffsetTop,\n          calendarDays,\n          normalPositions: result.normalPositions\n        });\n      } else if (selectedView === index_1.CALENDAR_VIEW.AGENDA) {\n        const agendaEvents = agendaView_1.getAgendaView(events, config);\n        resolve({\n          events: agendaEvents,\n          selectedView: index_1.CALENDAR_VIEW.AGENDA\n        });\n      }\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/deval/Desktop/JSX/calendar2.0/node_modules/kalend-layout/views/main.js"],"names":["Object","defineProperty","exports","value","index_1","require","commonHelper_1","agendaView_1","daysView_1","monthViewHelper_1","monthView_1","Helper_1","validator_1","default","data","Promise","resolve","validateInput","events","width","config","height","isMobile","selectedView","calendarDays","parseToCalendarDays","CALENDAR_VIEW","MONTH","monthPositions","getMonthViewLayout","getMaxEventsVisible","assign","overflowingEvents","checkIfIsDaysView","result","getDaysViewLayout","headerPositions","positions","headerOffsetTop","normalPositions","AGENDA","agendaEvents","getAgendaView"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,uBAAD,CAA9B;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,cAAD,CAA5B;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,0BAAD,CAAjC;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAMO,WAAW,GAAGP,OAAO,CAAC,oBAAD,CAA3B;;AACAH,OAAO,CAACW,OAAR,GAAmBC,IAAD,IAAU;AACxB,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5B,QAAIF,IAAJ,EAAU;AACNF,MAAAA,WAAW,CAACK,aAAZ,CAA0BH,IAA1B;AACA,YAAM;AAAEI,QAAAA,MAAF;AAAUC,QAAAA,KAAV;AAAiBC,QAAAA,MAAjB;AAAyBC,QAAAA,MAAzB;AAAiCC,QAAAA,QAAjC;AAA2CC,QAAAA;AAA3C,UAA4DT,IAAlE,CAFM,CAGN;;AACA,YAAMU,YAAY,GAAGb,QAAQ,CAACc,mBAAT,CAA6BX,IAAI,CAACU,YAAlC,CAArB,CAJM,CAKN;;AACA,UAAID,YAAY,KAAKnB,OAAO,CAACsB,aAAR,CAAsBC,KAA3C,EAAkD;AAC9C,cAAMC,cAAc,GAAGlB,WAAW,CAACmB,kBAAZ,CAA+BX,MAA/B,EAAuCC,KAAvC,EAA8CK,YAA9C,EAA4DJ,MAA5D,EAAoEX,iBAAiB,CAACqB,mBAAlB,CAAsCT,MAAtC,CAApE,CAAvB;AACAL,QAAAA,OAAO,CAAChB,MAAM,CAAC+B,MAAP,CAAc/B,MAAM,CAAC+B,MAAP,CAAc;AAAER,UAAAA,YAAY,EAAEnB,OAAO,CAACsB,aAAR,CAAsBC;AAAtC,SAAd,EAA6DC,cAA7D,CAAd,EAA4F;AAAEJ,UAAAA,YAAF;AAAgBQ,UAAAA,iBAAiB,EAAEJ,cAAc,CAACI;AAAlD,SAA5F,CAAD,CAAP;AACH,OAHD,MAIK,IAAI1B,cAAc,CAAC2B,iBAAf,CAAiCV,YAAjC,CAAJ,EAAoD;AACrD,cAAMW,MAAM,GAAG1B,UAAU,CAAC2B,iBAAX,CAA6BjB,MAA7B,EAAqCM,YAArC,EAAmDJ,MAAnD,EAA2DD,KAA3D,EAAkEI,YAAlE,EAAgFD,QAAhF,CAAf;AACAN,QAAAA,OAAO,CAAC;AACJO,UAAAA,YADI;AAEJa,UAAAA,eAAe,EAAEF,MAAM,CAACE,eAAP,CAAuBC,SAFpC;AAGJC,UAAAA,eAAe,EAAEJ,MAAM,CAACE,eAAP,CAAuBE,eAHpC;AAIJd,UAAAA,YAJI;AAKJe,UAAAA,eAAe,EAAEL,MAAM,CAACK;AALpB,SAAD,CAAP;AAOH,OATI,MAUA,IAAIhB,YAAY,KAAKnB,OAAO,CAACsB,aAAR,CAAsBc,MAA3C,EAAmD;AACpD,cAAMC,YAAY,GAAGlC,YAAY,CAACmC,aAAb,CAA2BxB,MAA3B,EAAmCE,MAAnC,CAArB;AACAJ,QAAAA,OAAO,CAAC;AACJE,UAAAA,MAAM,EAAEuB,YADJ;AAEJlB,UAAAA,YAAY,EAAEnB,OAAO,CAACsB,aAAR,CAAsBc;AAFhC,SAAD,CAAP;AAIH;AACJ;AACJ,GA7BM,CAAP;AA8BH,CA/BD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst index_1 = require(\"../index\");\nconst commonHelper_1 = require(\"../utils/commonHelper\");\nconst agendaView_1 = require(\"./agendaView\");\nconst daysView_1 = require(\"./daysView\");\nconst monthViewHelper_1 = require(\"../utils/monthViewHelper\");\nconst monthView_1 = require(\"./monthView\");\nconst Helper_1 = require(\"../utils/Helper\");\nconst validator_1 = require(\"../utils/validator\");\nexports.default = (data) => {\n    return new Promise((resolve) => {\n        if (data) {\n            validator_1.validateInput(data);\n            const { events, width, config, height, isMobile, selectedView } = data;\n            // parse to calendar days if dates are ISO string\n            const calendarDays = Helper_1.parseToCalendarDays(data.calendarDays);\n            // calculate layout for different views\n            if (selectedView === index_1.CALENDAR_VIEW.MONTH) {\n                const monthPositions = monthView_1.getMonthViewLayout(events, width, calendarDays, config, monthViewHelper_1.getMaxEventsVisible(height));\n                resolve(Object.assign(Object.assign({ selectedView: index_1.CALENDAR_VIEW.MONTH }, monthPositions), { calendarDays, overflowingEvents: monthPositions.overflowingEvents }));\n            }\n            else if (commonHelper_1.checkIfIsDaysView(selectedView)) {\n                const result = daysView_1.getDaysViewLayout(events, calendarDays, config, width, selectedView, isMobile);\n                resolve({\n                    selectedView,\n                    headerPositions: result.headerPositions.positions,\n                    headerOffsetTop: result.headerPositions.headerOffsetTop,\n                    calendarDays,\n                    normalPositions: result.normalPositions,\n                });\n            }\n            else if (selectedView === index_1.CALENDAR_VIEW.AGENDA) {\n                const agendaEvents = agendaView_1.getAgendaView(events, config);\n                resolve({\n                    events: agendaEvents,\n                    selectedView: index_1.CALENDAR_VIEW.AGENDA,\n                });\n            }\n        }\n    });\n};\n"]},"metadata":{},"sourceType":"script"}